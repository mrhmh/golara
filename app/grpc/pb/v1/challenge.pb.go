// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: app/grpc/proto/v1/challenge.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *IndexRequest) Reset() {
	*x = IndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_grpc_proto_v1_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRequest) ProtoMessage() {}

func (x *IndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_grpc_proto_v1_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRequest.ProtoReflect.Descriptor instead.
func (*IndexRequest) Descriptor() ([]byte, []int) {
	return file_app_grpc_proto_v1_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *IndexRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *IndexRequest) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

type ChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	StartsAt string `protobuf:"bytes,3,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	EndsAt   string `protobuf:"bytes,4,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	IsActive string `protobuf:"bytes,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Type     uint32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ChallengeResponse) Reset() {
	*x = ChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_grpc_proto_v1_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse) ProtoMessage() {}

func (x *ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_grpc_proto_v1_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse.ProtoReflect.Descriptor instead.
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_app_grpc_proto_v1_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengeResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChallengeResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChallengeResponse) GetStartsAt() string {
	if x != nil {
		return x.StartsAt
	}
	return ""
}

func (x *ChallengeResponse) GetEndsAt() string {
	if x != nil {
		return x.EndsAt
	}
	return ""
}

func (x *ChallengeResponse) GetIsActive() string {
	if x != nil {
		return x.IsActive
	}
	return ""
}

func (x *ChallengeResponse) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ChallengesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*ChallengeResponse `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *ChallengesResponse) Reset() {
	*x = ChallengesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_grpc_proto_v1_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengesResponse) ProtoMessage() {}

func (x *ChallengesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_grpc_proto_v1_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengesResponse.ProtoReflect.Descriptor instead.
func (*ChallengesResponse) Descriptor() ([]byte, []int) {
	return file_app_grpc_proto_v1_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengesResponse) GetChallenges() []*ChallengeResponse {
	if x != nil {
		return x.Challenges
	}
	return nil
}

var File_app_grpc_proto_v1_challenge_proto protoreflect.FileDescriptor

var file_app_grpc_proto_v1_challenge_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x73, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x32,
	0x38, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x12, 0x0d, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x70, 0x62, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_grpc_proto_v1_challenge_proto_rawDescOnce sync.Once
	file_app_grpc_proto_v1_challenge_proto_rawDescData = file_app_grpc_proto_v1_challenge_proto_rawDesc
)

func file_app_grpc_proto_v1_challenge_proto_rawDescGZIP() []byte {
	file_app_grpc_proto_v1_challenge_proto_rawDescOnce.Do(func() {
		file_app_grpc_proto_v1_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_grpc_proto_v1_challenge_proto_rawDescData)
	})
	return file_app_grpc_proto_v1_challenge_proto_rawDescData
}

var file_app_grpc_proto_v1_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_app_grpc_proto_v1_challenge_proto_goTypes = []interface{}{
	(*IndexRequest)(nil),       // 0: IndexRequest
	(*ChallengeResponse)(nil),  // 1: ChallengeResponse
	(*ChallengesResponse)(nil), // 2: ChallengesResponse
}
var file_app_grpc_proto_v1_challenge_proto_depIdxs = []int32{
	1, // 0: ChallengesResponse.challenges:type_name -> ChallengeResponse
	0, // 1: Challenge.All:input_type -> IndexRequest
	2, // 2: Challenge.All:output_type -> ChallengesResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_app_grpc_proto_v1_challenge_proto_init() }
func file_app_grpc_proto_v1_challenge_proto_init() {
	if File_app_grpc_proto_v1_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_grpc_proto_v1_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_grpc_proto_v1_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_grpc_proto_v1_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_grpc_proto_v1_challenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_grpc_proto_v1_challenge_proto_goTypes,
		DependencyIndexes: file_app_grpc_proto_v1_challenge_proto_depIdxs,
		MessageInfos:      file_app_grpc_proto_v1_challenge_proto_msgTypes,
	}.Build()
	File_app_grpc_proto_v1_challenge_proto = out.File
	file_app_grpc_proto_v1_challenge_proto_rawDesc = nil
	file_app_grpc_proto_v1_challenge_proto_goTypes = nil
	file_app_grpc_proto_v1_challenge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChallengeClient is the client API for Challenge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChallengeClient interface {
	All(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*ChallengesResponse, error)
}

type challengeClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeClient(cc grpc.ClientConnInterface) ChallengeClient {
	return &challengeClient{cc}
}

func (c *challengeClient) All(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*ChallengesResponse, error) {
	out := new(ChallengesResponse)
	err := c.cc.Invoke(ctx, "/Challenge/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeServer is the server API for Challenge service.
type ChallengeServer interface {
	All(context.Context, *IndexRequest) (*ChallengesResponse, error)
}

// UnimplementedChallengeServer can be embedded to have forward compatible implementations.
type UnimplementedChallengeServer struct {
}

func (*UnimplementedChallengeServer) All(context.Context, *IndexRequest) (*ChallengesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}

func RegisterChallengeServer(s *grpc.Server, srv ChallengeServer) {
	s.RegisterService(&_Challenge_serviceDesc, srv)
}

func _Challenge_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Challenge/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServer).All(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Challenge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Challenge",
	HandlerType: (*ChallengeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _Challenge_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/grpc/proto/v1/challenge.proto",
}
